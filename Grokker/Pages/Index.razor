@page "/"
@using Grokker.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Collections.ObjectModel
@inject IHttpClientFactory ClientFactory


<PageTitle>Index</PageTitle>

<h1>Comments</h1>

@if (getItemError)
{
    <p>Unable to get HN comment. Please try again later.</p>
}
else
{
    foreach (var item in _items.Where(x => x.Type == ItemType.Comment))
    {
        <p>@item.Text </p>
        <p>—@item.AuthorId on @item.CreationTime.ToLocalTime()</p>
        <hr/>
    }
}

@code {
    private readonly IList<Item> _items = new Collection<Item>();
    private bool getItemError;
    private bool shouldRender;
    private HttpClient _client;
    private User _user;
    
    private JsonSerializerOptions serializeOptions = new()
    {
        PropertyNameCaseInsensitive = true,
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        WriteIndented = true,
        Converters =
        {
            new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
        }
    };
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        _client = ClientFactory.CreateClient();

        try
        {
            _user = await GetUserById("tshell");
            foreach (var submissionId in _user.Submitted)
            {
                var item = await GetItemById(submissionId);
                _items.Add(item);
            }
        }
        catch
        {
            getItemError = true;
            return;
        }
        
        shouldRender = true;
    }

    private async Task<User> GetUserById(string id)
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://hacker-news.firebaseio.com/v0/user/" + id + ".json");
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var response = await _client.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            throw new BadHttpRequestException("oops");
        }
        return await JsonSerializer.DeserializeAsync<User>(
            await response.Content.ReadAsStreamAsync(), serializeOptions) 
               ?? throw new InvalidOperationException();
    }

    private async Task<Item> GetItemById(int id)
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://hacker-news.firebaseio.com/v0/item/" + id + ".json");
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var response = await _client.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            throw new BadHttpRequestException("oops");
        }
        return await JsonSerializer.DeserializeAsync<Item>(
            await response.Content.ReadAsStreamAsync(), serializeOptions) 
               ?? throw new InvalidOperationException();
    }
}